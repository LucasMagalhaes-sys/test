<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Visualização 3D de Vetores</title>
    <style>
        body { margin: 0; background-color: #1a1a1a; color: white; font-family: 'Inter', sans-serif; overflow: hidden; }
        canvas { display: block; }
        #info {
            position: absolute;
            top: 10px;
            width: 100%;
            text-align: center;
            z-index: 100;
            padding: 10px;
            background-color: rgba(0,0,0,0.3);
            border-radius: 8px;
        }
        .legend {
            position: absolute;
            bottom: 20px;
            left: 20px;
            background-color: rgba(40, 40, 40, 0.8);
            padding: 15px;
            border-radius: 10px;
            border: 1px solid #444;
        }
        .legend-item {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
        }
        .color-box {
            width: 20px;
            height: 20px;
            margin-right: 10px;
            border-radius: 4px;
        }
    </style>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
</head>
<body>

    <div id="info">
        <p><strong>Visualização 3D dos Vetores</strong></p>
        <p>Use o mouse para girar (clique e arraste), dar zoom (roda do mouse) e mover (botão direito + arraste).</p>
    </div>

    <div class="legend">
        <div class="legend-item">
            <div class="color-box" style="background-color: #ff6347;"></div>
            <span>Vetor u = (12, 0, -5)</span>
        </div>
        <div class="legend-item">
            <div class="color-box" style="background-color: #1e90ff;"></div>
            <span>Vetor v = (0, -3, 4)</span>
        </div>
         <div class="legend-item">
            <div class="color-box" style="background-color: #ffffff; border: 1px dashed #555;"></div>
            <span>Lado do triângulo (v-u)</span>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script type="module">
        // Import OrbitControls from the three.js examples
        import { OrbitControls } from 'https://cdn.jsdelivr.net/npm/three@0.128/examples/jsm/controls/OrbitControls.js';
        import { FontLoader } from 'https://cdn.jsdelivr.net/npm/three@0.128/examples/jsm/loaders/FontLoader.js';
        import { TextGeometry } from 'https://cdn.jsdelivr.net/npm/three@0.128/examples/jsm/geometries/TextGeometry.js';


        // Scene, Camera, Renderer
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setPixelRatio(window.devicePixelRatio);
        document.body.appendChild(renderer.domElement);

        // Controls
        const controls = new OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.05;

        // Lighting
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
        scene.add(ambientLight);
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
        directionalLight.position.set(5, 10, 7.5);
        scene.add(directionalLight);

        // Axes Helper
        const axesHelper = new THREE.AxesHelper(15);
        scene.add(axesHelper);

        // Vector definitions
        const origin = new THREE.Vector3(0, 0, 0);
        const u_vec = new THREE.Vector3(12, 0, -5);
        const v_vec = new THREE.Vector3(0, -3, 4);

        // Colors
        const u_color = 0xff6347; // Tomato
        const v_color = 0x1e90ff; // DodgerBlue
        const triangle_color = 0xffffff; // White

        // Create arrows for vectors
        const u_arrow = new THREE.ArrowHelper(u_vec.clone().normalize(), origin, u_vec.length(), u_color, 1, 0.5);
        const v_arrow = new THREE.ArrowHelper(v_vec.clone().normalize(), origin, v_vec.length(), v_color, 1, 0.5);
        scene.add(u_arrow);
        scene.add(v_arrow);

        // Create the triangle
        const points = [origin, u_vec, v_vec];
        const triangleGeometry = new THREE.BufferGeometry().setFromPoints(points);
        // This creates the filled triangle face
        triangleGeometry.setIndex([0, 1, 2]);
        triangleGeometry.computeVertexNormals();
        const triangleMaterial = new THREE.MeshPhongMaterial({
            color: 0xaaaaaa,
            side: THREE.DoubleSide,
            transparent: true,
            opacity: 0.3
        });
        const triangleMesh = new THREE.Mesh(triangleGeometry, triangleMaterial);
        scene.add(triangleMesh);

        // Create the outline of the triangle
        const lineMaterial = new THREE.LineBasicMaterial({ color: triangle_color, linewidth: 2 });
        const lineGeometry = new THREE.BufferGeometry().setFromPoints([u_vec, v_vec]);
        const triangleSideLine = new THREE.Line(lineGeometry, lineMaterial);
        scene.add(triangleSideLine);
        
        // Add labels
        const loader = new FontLoader();
        loader.load('https://cdn.jsdelivr.net/npm/three@0.128/examples/fonts/helvetiker_regular.typeface.json', function (font) {
            const textMaterial = new THREE.MeshBasicMaterial({ color: u_color });
            const textGeoU = new TextGeometry('u', { font: font, size: 0.8, height: 0.1 });
            const textMeshU = new THREE.Mesh(textGeoU, textMaterial);
            textMeshU.position.copy(u_vec).add(new THREE.Vector3(0.5, 0.5, 0.5));
            scene.add(textMeshU);

            const textMaterialV = new THREE.MeshBasicMaterial({ color: v_color });
            const textGeoV = new TextGeometry('v', { font: font, size: 0.8, height: 0.1 });
            const textMeshV = new THREE.Mesh(textGeoV, textMaterialV);
            textMeshV.position.copy(v_vec).add(new THREE.Vector3(0.5, 0.5, 0.5));
            scene.add(textMeshV);
        });


        // Position camera
        camera.position.set(10, 10, 20);
        camera.lookAt(scene.position);

        // Animation loop
        function animate() {
            requestAnimationFrame(animate);
            controls.update(); // only required if controls.enableDamping = true, or if controls.autoRotate = true
            renderer.render(scene, camera);
        }

        // Handle window resize
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }, false);

        animate();

    </script>
</body>
</html>
